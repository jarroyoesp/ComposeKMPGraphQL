plugins {
    id 'org.jetbrains.kotlin.multiplatform'
    id 'kotlinx-serialization'
    id 'com.android.library'
    id 'com.apollographql.apollo'
}

android {
    compileSdkVersion(31)

    defaultConfig {
        minSdkVersion(21)
        targetSdkVersion(31)
    }

    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs = ['src/androidMain/kotlin']
            res.srcDirs = ['src/androidMain/res']
        }
        test {
            java.srcDirs = ['src/androidTest/kotlin']
            res.srcDirs = ['src/androidTest/res']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    configurations {
        create("androidTestApi")
        create("androidTestDebugApi")
        create("androidTestReleaseApi")
        create("testApi")
        create("testDebugApi")
        create("testReleaseApi")
    }
}

kotlin {
    targets {
        fromPreset(presets.android, 'android')

        fromPreset(presets.jvm, 'jvm')

        def iosPreset = presets.iosX64
        fromPreset(iosPreset, 'ios') {
            binaries {
                framework {
                    // Disable bitcode embedding for the simulator build.
                    if (iosPreset == presets.iosX64) {
                        embedBitcode("disable")
                    }
                }
            }
            //compilations.main.outputKinds('FRAMEWORK')
            compilations.each {
                //it.extraOpts("-linkerOpts", "-lsqlite3")
            }
        }

    }

    sourceSets {
        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            implementation 'org.jetbrains.kotlin:kotlin-stdlib'

            // COROUTINES
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

            // KODE IN
            implementation "org.kodein.di:kodein-di:$kodeinVersion"

            // Arrow
            def arrowVersion = "1.0.0"
            implementation "io.arrow-kt:arrow-core:$arrowVersion"

            // APOLLO GRAPH QL
            implementation("com.apollographql.apollo:apollo-runtime-kotlin:$graphql_version")
        }

        androidMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
        }

        iosMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
        }

        commonTest.dependencies {
            implementation kotlin('test-common')
            implementation kotlin('test-annotations-common')
            //implementation "io.mockk:mockk:$mockk_version"
        }
    }
}

task packForXCode {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkIos"
    //dependsOn "linkMainDebugFrameworkIOS"

    doLast {
        def srcFile = kotlin.targets.ios.binaries.getFramework(buildType).outputFile
        def targetDir = getProperty("configuration.build.dir")
        copy {
            from srcFile.parent
            into targetDir
            include 'SharedCode.framework/**'
            include 'SharedCode .framework.dSYM'
        }
    }
}

allprojects {
    configurations {
        all {
            resolutionStrategy {
                force("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version")
            }
        }
    }
}